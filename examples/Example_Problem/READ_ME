A few pointers on compiling, using gnuplot and supermongo (sm for
short) and LaTeX...

COMPILING AND RUNNING YOUR PROGRAM
==================================

You can compile your C++ program with g++.  For example, if your
program is in the file Prob1.C, compliling with

	g++ Prob1.C

will give you an executable called a.out. To create an "object", 
i.e. executable called Prob1, compile with

	g++ -o Prob1 Prob1.C 

To "link" parts of the program that live in different 
files, say Otherfile1.C, compile with

	g++ -o Prob1 Prob1.C Otherfile1.C Otherfile2.C ...

To do some math in C++, link with the math libary by including a -lm
at the end: 

	g++ -o Prob1 Prob1.C Otherfile1.C -lm

To run this program, type either 

	Prob1

or
	./Prob1

(you may need to do the latter, depending on how your account is
set up).  

Once you get used to it, it's much more convenient to use a makefile.
There's an example in the subdirectory "Program" - cd into that
directory, type

	make

and it'll compile the program Prob for you.  You can modify the makefile
for your programs.

PLOTTING RESULTS
================

You'll often have to look at your results.  For example, run the program
Prob for lambda = 0.5, and it'll give you a datafile "data_0.5.out" that
starts with

# lambda = 0.5
#===============================================
0           0.5            0.5005
1           0.125          0.125
2           0.0546875      0.0546875
3           0.0258484      0.0258484
4           0.0125901      0.0125901
5           0.00621581     0.0062158
6           0.00308859     0.00308858
7           0.00153952     0.00153952
8           0.000768576    0.000768576
9           0.000383993    0.000383993
10          0.000191923    0.000191923
11          9.59429e-05    9.59429e-05
12          4.79669e-05    4.79668e-05
13          2.39823e-05    2.39823e-05
14          1.19909e-05    1.19908e-05
15          5.99535e-06    5.99535e-06

An easy way to plot these data is with gnuplot, a much nicer way is
supermongo (sm), or use python.  All these programs ignore comment lines that start with "#".

GNUPLOT

Type

	gnuplot

and you'll get a new command line.  At the command line, type

	plot "data_0.5.out" u 1:2 w l

and you'll get a plot.  The "u 1:2" stands for "using columns 1 and 2",
and the "w l" stands for with lines (you'll get crosses without the "w l").
To plot both columns 2 and 3, try

	plot "data_0.5.out" u 1:2 w l, "data_0.5.out" u 1:3 w l

When you're done, type 

	quit

SUPERMONGO

Type 	
	sm

and you'll again get a new command line.  First type 

	dev x11

to get a window ("dev" stands for device).  Then specify a datafile
with
	
	data data_0.5.out

Read data, e.g. columns 1 and 2, with

	read { k 1 n 2}

Let supermongo figure out the limits of the plot

	lim k n

and make a box

	box

Now draw the line

	connect k n

and put labels on the axes

	xlabel k
	ylabel N

Now you realize that the labels and everything is too small, so 
erase everything with

	erase

say 

	expand 2

and start over...  Instead of typing everything again, you could
define a macro that contains all the above commands.  I've already
done that for you:  cd into the subdirectory Results, and you'll
see a file macro.sm with several macros.  To load these, start
sm and type

	macro read macro.sm

You can then say, for example

	plot data_0.5.out

("plot" is now defined in macro.sm).  Or try Fig1, Fig2, Fig3 and
Fig4 for something more fancy (you may have to adjust the limits
in "lateplot" for some of them.

Imagine now, you want to create a postscript file for Fig1.  First
change the device to "encapsulated postscript" with

	dev postencap Fig1.eps

then repeat all the commands for the figure, e.g. just type 

	Fig1

then create a "hardcopy" with

	hardcopy

You should now have a postscript file Fig1.eps in the directory, 
and you can look at it, for example with gv (at the unix prompt,
not the sm prompt).

To get help with supermongo, type 

	help

at the command line...  To quit, type quit.

LaTeX
=====

A very nice way of writing up your results is using LaTeX.  There are
many manuals available, but it's probably easiest to start with an
example.  How you "compile" a tex file depends on the operating
system.  On a Mac, you can use an application like TexShop that will
do it for you.  On a linux machine you can do the following.

To compile the Example Problem assignment, type

	latex example_problem

(you don't need the .tex extension) and it'll tell you that some
references aren't right.  Simply latex again.  This produces a 
.dvi file example_problem.dvi that you can look at with

	xdvi example_problem

(again, no extension necessary).  If needed, you can print this
out with 

	dvips example_problem

If you prefer handling pdf files, you can produce such a file
directly with

	pdflatex example_problem

which will create a pdf file example_problem.pdf.  In fact, I've converted
all postscript figures into pdf files with
	
	convert Fig1.eps Fig1.pdf

so that latex can use either the eps files (for dvi) or the pdf
files (for pdf) as it needs.

If you like, feel free to use example_problem.tex as a template for your
future write-ups.

